2EE IF688 (Compiladores), 6 de Dezembro de 2018
Prof. Marcelo d'Amorim

1. (1 pontos) Marque as opções corretas:

- Um registro de ativação contém endereço de retorno do chamador de
  uma função.
  ( ) verdadeiro ( ) falso
  
- Uma linguagem com gerenciamento manual de memória é mais suceptível
  a erros como memory leaks e acesso indevido de memória.
  ( ) verdadeiro ( ) falso
  
- O garbage collector "mark-and-sweep" pode ser ativado (entrar em
  execução) a qualquer momento durante a execução do programa.
  ( ) verdadeiro ( ) falso

- O garbage collector "reference counting" não onera o custo execução
  de uma instrução.
  (  ) verdadeiro (  ) falso

- O gerenciador de memória é embutido em um programa compilado e é
  responsável por fazer a interface com o sistema operacional.
  (  ) verdadeiro (  ) falso  

2. (4 pontos) Indique qual otmização vista em sala (ou otimizações) o
compilador pode realizar em cada um dos trechos de código abaixo. É
necessário indicar o nome da otimização e dizer precisamente o que ela
faz e porque ela faz.

a)   c = 5;
     for (i=0; i<N; i++){
       x[i]=c*i;
     }

b)   for (i=0; i<N; i++){
       x=x+k;
       for (j=0; j<N; j++){
         a[i][j]=100*N+10*i+j+x;
       }
     }

3. (1 ponto) Coloque o código abaixo no formato SSA e indique suas
dependências de dados

int z = -1;
void diff(int x, int y) {
  if (x > y) {
    int tmp = x;
    x = y;
    y = tmp;
  }
  z = y - x;
}

4. (1 ponto) Considere o fragmento de código de três endereços ao lado
e construa seu Control Flow Graph (CFG).

I: s = t + u
R: t = t * 2
   if (t<v) goto F
   z = t - s
   if (f<v) goto I
F: w = 2 + z
   s = w - 3
   if (s>v) goto R
   x = w
   z = x*s

5. (1 ponto) Uma prática comum de programação defensiva é verificar se
os paramêtros de uma função satisfazem suas pré-condições. O exemplo
abaixo mostra uma situação destas onde os parâmetros de mesmo tipo não
podem apontar para o mesmo objeto. Explique como análise de ponteiros
pode ajudar na otimização de um trecho de código como este.

foo(T o1, T o2) {
  if (o1 == o2) { ... /* levante exceção */ }
  else {
    ... /* corpo da função */
  }
}

6. (2 pontos) Indique vantagens que o uso de uma representação
intermediária de código pode trazer para a construção de um
compilador. Cite exemplo(s).
